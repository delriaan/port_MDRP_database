)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
label(`$`(api_data, y)) <- .label
})
api_dictionary <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text()
names(api_data[, !"id"]) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
iwalk(\(x, y){
.label <- api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
api_data[, `:=`(!!y, setattr(get(y), "label", .label))]
})
api_dictionary <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text()
names(api_data[, !"id"]) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
iwalk(\(x, y){
.label <- api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
api_data[, `:=`(y, setattr(get(y), "label", .label))]
})
api_dictionary <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text()
names(api_data[, !"id"]) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
iwalk(\(x, y){
.label <- api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
api_data[, `:=`(y, setattr(mget(y), "label", .label))]
})
.labels <- names(api_data[, !"id"]) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
})
.labels
.labels <- names(api_data[, !"id"]) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
})
.labels
names(api_data)
api_data <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+csv", simplify = TRUE) |>
as.vector() %T>%
(\(x) tags$p(sprintf("Retrieve data from '%s'", x)) |> print())() |>
GET() |>
content() |>
rawToChar() |>
(\(x) read.csv(text = x))() |>
as.data.table(na.rm = FALSE)
rm(.labels)
?`label<-`
.summary_labels <- names(api_data[, !"id"]) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, .)
});
iwalk(.summary_labels, \(x, y){ api_data[[y]] <<- setattr(api_data[[y]], "label", x) })
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(x){ label(x) <- .label; x }) })
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
.summary_labels <- names(api_data) |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
rlang::set_names() |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, paste(., collapse = "\n"))
});
.summary_labels
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ label(x) <- .label; i }) })
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
.summary_labels <- names(api_data) |>
rlang::set_names() |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
ifelse(identical(character(), .), y, paste(., collapse = "\n"))
});
.summary_labels <- names(api_data) |>
rlang::set_names() |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i) ifelse(identical(character(), i), y, paste(i, collapse = "\n")))()
});
names(api_data) |>
rlang::set_names() |>
stri_replace_all_fixed(".", " ", vectorize_all = FALSE)
names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE))
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i) ifelse(identical(character(), i), y, paste(i, collapse = "\n")))()
});
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ label(x) <- .label; i }) })
.summary_labels
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i }) })
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i }) })
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
api_dictionary <- invisible(urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text())
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i }) })
api_dictionary <- invisible(urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text())
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i }) })
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
