, "Days most-recently \nabsent from market")
, c("days_to_market", "on_market_age", "days_market_absent")
)|>
iwalk(\(x, y) rlang::parse_expr(sprintf("setattr(ndc_events$%s, \"label\", \"%s\")", y, x)) |> eval(envir = .GlobalEnv))
View(ndc_events)
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = market_date - fda_approval_date
, on_market_age = { ifelse(
is.na(reactivation_date)
, modify_if(termination_date, is.na, \(x) today()) - market_date
, today() - reactivation_date
)}
, days_market_absent = { ifelse(
is.na(termination_date)
, duration(0, "days")
, ifelse(is.na(reactivation_date), today(), reactivation_date) - termination_date
)}
);
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = market_date - fda_approval_date
, on_market_age = { ifelse(
is.na(reactivation_date)
, modify_if(termination_date, is.na, \(x) today()) - market_date
, today() - reactivation_date
)}
, days_market_absent = {
modify_if(reactivation_date, is.na, \(x) today()) -
modify_if(termination_date, is.na, \(x) today())
}
);
rlang::set_names(
c("Days between approval \nand market release"
, "Days active on market"
, "Days most-recently \nabsent from market")
, c("days_to_market", "on_market_age", "days_market_absent")
)|>
iwalk(\(x, y) rlang::parse_expr(sprintf("setattr(ndc_events$%s, \"label\", \"%s\")", y, x)) |> eval(envir = .GlobalEnv))
View(ndc_events)
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = market_date - fda_approval_date
, on_market_age = {
ifelse(is.na(termination_date), ifelse(is.na(reactivation_date), today(), reactivation_date), termination_date) -
ifelse(is.na(reactivation_date), ifelse(is.na(termination_date), market_date, termination_date), reactivation_date)
}
, days_market_absent = {
ifelse(is.na(reactivation_date), today(), reactivation_date) -
ifelse(is.na(termination_date), today(), termination_date)
}
);
rlang::set_names(
c("Days between approval \nand market release"
, "Days active on market"
, "Days most-recently \nabsent from market")
, c("days_to_market", "on_market_age", "days_market_absent")
)|>
iwalk(\(x, y) rlang::parse_expr(sprintf("setattr(ndc_events$%s, \"label\", \"%s\")", y, x)) |> eval(envir = .GlobalEnv))
View(ndc_events)
ndc_events <- modify_at(ndc_events, c("on_market_age", "days_market_absent"), days)
View(ndc_events)
ndc_events <- modify_at(ndc_events, c("on_market_age", "days_market_absent"), \(x) as.duration(x, "days"))
ndc_events <- modify_at(ndc_events, c("on_market_age", "days_market_absent"), \(x) as.duration(x, units = "days"))
ndc_events <- modify_at(ndc_events, c("on_market_age", "days_market_absent"), \(x) duration(x, units = "days"))
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = market_date - fda_approval_date
, on_market_age = duration({
ifelse(is.na(termination_date), ifelse(is.na(reactivation_date), today(), reactivation_date), termination_date) -
ifelse(is.na(reactivation_date), ifelse(is.na(termination_date), market_date, termination_date), reactivation_date)
}, units = "days")
, days_market_absent = duration({
ifelse(is.na(reactivation_date), today(), reactivation_date) -
ifelse(is.na(termination_date), today(), termination_date)
}, units = "days")
);
rlang::set_names(
c("Days between approval \nand market release"
, "Days active on market"
, "Days most-recently \nabsent from market")
, c("days_to_market", "on_market_age", "days_market_absent")
)|>
iwalk(\(x, y) rlang::parse_expr(sprintf("setattr(ndc_events$%s, \"label\", \"%s\")", y, x)) |> eval(envir = .GlobalEnv))
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = duration(market_date - fda_approval_date, units = "days")
, on_market_age = duration({
ifelse(is.na(termination_date), ifelse(is.na(reactivation_date), today(), reactivation_date), termination_date) -
ifelse(is.na(reactivation_date), ifelse(is.na(termination_date), market_date, termination_date), reactivation_date)
}, units = "days")
, days_market_absent = duration({
ifelse(is.na(reactivation_date), today(), reactivation_date) -
ifelse(is.na(termination_date), today(), termination_date)
}, units = "days")
);
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = duration(as.integer(market_date) - as.integer(fda_approval_date), units = "days")
, on_market_age = duration({
ifelse(is.na(termination_date), ifelse(is.na(reactivation_date), today(), reactivation_date), termination_date) -
ifelse(is.na(reactivation_date), ifelse(is.na(termination_date), market_date, termination_date), reactivation_date)
}, units = "days")
, days_market_absent = duration({
ifelse(is.na(reactivation_date), today(), reactivation_date) -
ifelse(is.na(termination_date), today(), termination_date)
}, units = "days")
);
rlang::set_names(
c("Days between approval \nand market release"
, "Days active on market"
, "Days most-recently \nabsent from market")
, c("days_to_market", "on_market_age", "days_market_absent")
)|>
iwalk(\(x, y) rlang::parse_expr(sprintf("setattr(ndc_events$%s, \"label\", \"%s\")", y, x)) |> eval(envir = .GlobalEnv))
book.of.workflow::save_image("master_drug_data", file.name = "master_drug_data"
, use.prefix = FALSE, use.timestamp = FALSE, safe = FALSE)
options(future.globals.maxSize = 2 * 1024 * 10E6);
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools", "lubridate", "future", "furrr", "future.callr")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow")) |> c("architect")
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(
style = "text-deoration:italic; color:#333333; "
, "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow', 'architect'"
);
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
remotes::install_github("delriaan/architect", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
load_unloaded(!!!.git_libs)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |> imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
, openFDA = "https://download.open.fda.gov/drug/ndc/drug-ndc-0001-of-0001.json.zip"
)
tags$table(
style = "width:475px; "
, tags$tr(
tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#EEEEEE; ", "CRAN", colspan = 2, width="65%")
, tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#AAAAAA; ", width = "*", "GitHub")
)
, tags$tr(
style = "align:top"
, tags$td(style = "text-align:middle; background-color:#AAAAAA; "
, map(.cran_libs[1:5], \(x) tags$li(x)) |> list() |> tags$ul())
, tags$td(style = "text-align:middle; background-color:#AAAAAA; "
, map(.cran_libs[6:length(.cran_libs)], \(x) tags$li(x)) |> list() |> tags$ul())
, tags$td(style = "background-color:#EEEEEE; padding-right:20px; ", urls$git_libs)
)
) |> tags$p()
# MDRP database data
if (rlang::is_empty(dir(pattern = "mdrp_api_data[.][Rr]data$"))){
if (!"api_data" %in% ls()){
api_data <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+csv", simplify = TRUE) |>
as.vector() %T>%
(\(x) tags$p(sprintf("Retrieve data from '%s'", x)) |> print())() |>
GET() |>
content() |>
rawToChar() |>
(\(x) read.csv(text = x, ))() |>
as.data.table(na.rm = FALSE) |>
modify_at(c(4:7), as.character) %>%
modify_at(ls(., pattern = "Date"), lubridate::mdy) %>%
setnames(stri_replace_all_fixed(names(.) |> tolower(), ".", "_"))
}
if (!"api_dictionary" %in% ls()){
api_dictionary <- invisible(urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text())
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){
.label = x;
api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i })
})
}
} else {
if (!"api_data" %in% ls()){
dir(pattern = "mdrp_api_data") |> load()
}
# openFDA supplementary data
if (rlang::is_empty(dir(pattern = "openFDA_ndc[.][Rr]data$"))){
if (!"openFDA_ndc" %in% ls()){ openFDA_ndc <- (\(x){
json.file <- "drug-ndc-0001-of-0001.json";
if (!json.file %in% dir()){
GET(urls$openFDA, write_disk(x, TRUE))
unzip(zipfile = x)
}
read_json(path = json.file);
})("ndc_json.zip") |> (\(x){
data.table::rbindlist(modify_at(x$results, 1:length(x$results), as.data.table), fill = TRUE) |>
setattr("metadata", x$meta)
})()
}
} else {
if (!"openFDA_ndc" %in% ls()){
dir(pattern = "openFDA_ndc") |> load()
}
api_data[runif(n= nrow(api_data)) <= 0.33, !"id"] |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data");
list(
`OpenFDA: NDC Formats` = openFDA_ndc[, unique(product_ndc)] |>
sort() |>
stri_split_fixed("-") |>
map_chr(\(x) stri_length(x) |> paste(collapse = "-")) |>
table() |>
ratio(type = "of.sum", decimals = 6)
, `MDRP: NDC Formats` = api_data[, paste(stri_length(labeler_code), stri_length(product_code), sep = "-")] |>
sort() |>
table() |>
ratio(type = "of.sum", decimals = 6)
) |>
imap(\(x, y){
tags$li(
tags$b(y)
, HTML(": <br>&nbsp;&nbsp; ")
, sprintf("[%s]: %.2f %%", names(x), 100 * x) |> paste(collapse = "<br>&nbsp;&nbsp; ") |> HTML()
)
}) |>
tags$ul() |>
tags$p()
check_ndc_format <- \(lc, pc){
pc <- modify_if(pc, \(i) stri_length(i) < 3, \(i) stri_pad_left(i, width = 3, pad = "0"))
lc <- modify_if(
lc
, \(i) stri_length(i) < 4
, \(i) stri_pad_left(i, width = ifelse(stri_length(pc) == 3, 5, 4), pad = "0")
)
paste(lc, pc, sep = "-")
}
if (rlang::is_empty(dir(pattern = "master_drug_data[.][Rr]data$"))){
if (!"master_drug_data" %in% ls()){
master_drug_data <- (\(x, i) x[
i, on = "alt_ndc==product_ndc"
, nomatch = 0
, allow.cartesian = TRUE
, `:=`(pharm_class = pharm_class
, dea_schedule = dea_schedule
, product_type = product_type
, route = route
, marketing_category = marketing_category
)
, by = .EACHI
])(api_data[, alt_ndc := map2_chr(labeler_code, product_code, check_ndc_format)]
, openFDA_ndc)
master_drug_data[, `:=`(
pharm_class := map_chr(pharm_class, \(x) unlist(x) %||% "~")
, route := map_chr(route, \(x) unlist(x) %||% "~")
)]
}
} else {
if (!"master_drug_data" %in% ls()){
dir(pattern = "master_drug_data[.][Rr]data$") |> load()
}
if (!"ndc_events" %in% ls()){
ndc_events <- define(
master_drug_data
, ~alt_ndc + fda_product_name + drug_category +
pharm_class + dea_schedule + product_type +
route + marketing_category + fda_approval_date +
market_date + termination_date + reactivation_date
, unique(.SD)
, days_to_market = duration(as.integer(market_date) - as.integer(fda_approval_date), units = "days")
, on_market_age = duration({
ifelse(is.na(termination_date), ifelse(is.na(reactivation_date), today(), reactivation_date), termination_date) -
ifelse(is.na(reactivation_date), ifelse(is.na(termination_date), market_date, termination_date), reactivation_date)
}, units = "days")
, days_market_absent = duration({
ifelse(is.na(reactivation_date), today(), reactivation_date) -
ifelse(is.na(termination_date), today(), termination_date)
}, units = "days")
);
rlang::set_names(
c("Days between approval \nand market release"
, "Days active on market"
, "Days most-recently \nabsent from market")
, c("days_to_market", "on_market_age", "days_market_absent")
)|>
iwalk(\(x, y) rlang::parse_expr(sprintf("setattr(ndc_events$%s, \"label\", \"%s\")", y, x)) |> eval(envir = .GlobalEnv))
}
View(ndc_events)
book.of.workflow::save_image("ndc_events", file.name = "ndc_events"
, use.prefix = FALSE, use.timestamp = FALSE, safe = FALSE)
knitr::opts_chunk$set(opts_chunk = list(cache=TRUE, cache.lazy=TRUE, warning=FALSE, message=FALSE))
source("setup.R", local = TRUE)
urls$data
tags$table(
style = "width:600px; "
, tags$tr(
tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#EEEEEE; ", "CRAN", colspan = 3, width="65%")
, tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#AAAAAA; ", width = "*", "GitHub")
)
, tags$tr(
style = "align:top"
, slider::slide(
params$cran_libs
, .after = 5
, .step = 6
, .f = \(x){
sprintf("<li>%s</li>", x) |> HTML() |>
tags$ul() |>
tags$td(style = "text-align:middle; background-color:#AAAAAA; ")
}
, .complete = TRUE) |>
purrr::compact()
, tags$td(style = "background-color:#EEEEEE; padding-right:20px; ", urls$git_libs)
)
) |> tags$p()
if (!"api_data" %in% .cache$keys()){
.cache$set("api_data", as.character(urls$data) |>
stri_extract_all_regex("http.+csv", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
rawToChar() |>
(\(x) read.csv(text = x, ))() |>
as.data.table(na.rm = FALSE) |>
modify_at(c(4:7), as.character) %>%
modify_at(ls(., pattern = "Date"), lubridate::mdy) %>%
setnames(stri_replace_all_fixed(names(.) |> tolower(), ".", "_"))
)
}
if (!"api_data" %in% ls()){
makeActiveBinding("api_data", function(){ .cache$get("api_data")}, env = environment())
}
if (!"api_dictionary" %in% .cache$keys()){
.cache$set("api_dictionary", invisible(
as.character(urls$data) |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text()))
}
if (!"api_data" %in% ls()){
makeActiveBinding("api_data", function(){ .cache$get("api_data")}, env = environment())
}
}
if (!"api_data" %in% ls()){
makeActiveBinding("api_data", function(){ .cache$get("api_data")}, env = environment())
}
api_data
if (!"api_data" %in% ls()){
makeActiveBinding("api_data", function(){ .cache$get("api_data")}, env = environment())
}
api_data
api_data
api_data <- function(){ .cache$get("api_data")}
if (!"api_dictionary" %in% .cache$keys()){
.cache$set("api_dictionary", invisible(
as.character(urls$data) |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text()))
}
.summary_labels <- { .cache$get("api_data") |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
.cache$get("api_dictionary") |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
}
plan(callr);
.furrr_opts <- furrr_options(scheduling = Inf, seed = TRUE, packages = c("magrittr", "purrr", "stringi"), globals = ".cache");
.summary_labels <- { .cache$get("api_data") |>
rlang::set_names() |>
future_map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE), .options = .furrr_opts) |>
future_imap_chr(\(x, y){
.cache$get("api_dictionary") |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stringi::stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
}, .options = .furrr_opts);
}
