ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i }) })
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
Description = "https://www.medicaid.gov/medicaid/prescription-drugs/medicaid-drug-rebate-program/medicaid-drug-rebate-program-data/index.html"
, `Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, `API Information` = "https://data.medicaid.gov/dataset/0ad65fe5-3ad3-5d79-a3f9-7893ded7963a"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |>
imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
)
tags$table(
style = "width:475px; "
, tags$tr(
tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#EEEEEE; ", "CRAN", colspan = 2, width="65%")
, tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#AAAAAA; ", width = "*", "GitHub")
)
, tags$tr(
style = "align:top"
, tags$td(style = "text-align:middle; background-color:#AAAAAA; "
, map(.cran_libs[1:5], \(x) tags$li(x)) |> list() |> tags$ul())
, tags$td(style = "text-align:middle; background-color:#AAAAAA; "
, map(.cran_libs[6:length(.cran_libs)], \(x) tags$li(x)) |> list() |> tags$ul())
, tags$td(style = "background-color:#EEEEEE; padding-right:20px; ", urls$git_libs)
)
) |> tags$p()
api_data <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+csv", simplify = TRUE) |>
as.vector() %T>%
(\(x) tags$p(sprintf("Retrieve data from '%s'", x)) |> print())() |>
GET() |>
content() |>
rawToChar() |>
(\(x) read.csv(text = x))() |>
as.data.table(na.rm = FALSE)
api_dictionary <- invisible(urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text())
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){ .label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i }) })
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
Description = "https://www.medicaid.gov/medicaid/prescription-drugs/medicaid-drug-rebate-program/medicaid-drug-rebate-program-data/index.html"
, `Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |>
imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
)
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
Description = "https://www.medicaid.gov/medicaid/prescription-drugs/medicaid-drug-rebate-program/medicaid-drug-rebate-program-data/index.html"
, `Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |>
imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
)
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |>
imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
)
dplyr::slice_sample(api_data[, !"id"], prop = 0.33) |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
api_data[runif(n= nrow(api_data)) <= 0.33, !"id"] |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
api_data[runif(n= nrow(api_data)) <= 0.33, !"id"] |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |>
imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
)
api_data %<>% modify_at(c(4:7), as.character)
api_data[runif(n= nrow(api_data)) <= 0.33, !"id"] |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
api_data %<>% {
modify_at(., c(4:7), as.character) %>%
modify_at(ls(., pattern = "Date"), as.Date)
}
api_data %<>% {
modify_at(., c(4:7), as.character) %>%
modify_at(ls(., pattern = "Date"), lubridate::mdy)
}
api_data[runif(n= nrow(api_data)) <= 0.33, !"id"] |>
dfSummary(labels.col = TRUE) |>
view(method = "render", report.title = "Medicaid Drug Rebate Program (MDRP) Data") |>
print()
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools", "lubridate")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |> imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
, openFDA = tags$a(href = "https://open.fda.gov/apis/drug/ndc/", "openFDA")
)
tags$a(href = "https://open.fda.gov/apis/drug/ndc/", "openFDA")
?unzip
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools", "lubridate")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |> imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
, openFDA = tags$a(href = "https://download.open.fda.gov/drug/ndc/drug-ndc-0001-of-0001.json.zip", "openFDA NDC Data")
)
GET(urls$openFDA, write_disk("ndc_json.zip", TRUE)) |> unzip(list = TRUE)
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools", "lubridate")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |> imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
, openFDA = "https://download.open.fda.gov/drug/ndc/drug-ndc-0001-of-0001.json.zip"
)
openFDA_ndc <- GET(urls$openFDA, write_disk("ndc_json.zip", TRUE)) |> unzip(list = TRUE)
unzip(zipfile = "ndc_json.zip", list = TRUE)
unzip(zipfile = "ndc_json.zip", list = TRUE)[, 1]
openFDA_ndc <- (\(x){
GET(urls$openFDA, write_disk(x, TRUE))
unzip(zipfile = x, list = TRUE)[, 1] |> fromJSON()
})("ndc_json.zip")
openFDA_ndc <- (\(x){
GET(urls$openFDA, write_disk(x, TRUE))
json <- unzip(zipfile = x, list = TRUE)[, 1]
unzip(zipfile = x)
parse_json(json = json)
})("ndc_json.zip")
(!"drug-ndc-0001-of-0001" %in% dir())
(!"drug-ndc-0001-of-0001.json" %in% dir())
openFDA_ndc <- (\(x){
json.file <- "drug-ndc-0001-of-0001.json"
if (!json.file %in% dir()){ GET(urls$openFDA, write_disk(x, TRUE)) }
unzip(zipfile = x)
read_json(path = json.file)
})("ndc_json.zip")
View(openFDA_ndc)
inspect <- openFDA_ndc %$% |> list_merge(results[[1]], !!!results[-1])
inspect <- openFDA_ndc %$% list_merge(results[[1]], !!!results[-1])
install.packages("rlist")
rlist::list.find(openFDA_ndc[1:5], grepl("^0", .))
inspect <- openFDA_ndc[1:5] |> map(\(x) x[ls(x, pattern = "name|form|class")] |> unlist())
inspect <- openFDA_ndc[1]
inspect <- openFDA_ndc$result[[1]]
inspect <- openFDA_ndc$result[1:5] |> map(\(x) x[ls(x, pattern = "name|form|class")] |> unlist())
View(inspect)
rlang::last_trace()
inspect <- openFDA_ndc$result[1:5] |> map(\(x) x[ls(x, pattern = "name|form|class")] |> unlist()) |> rbindlist(fill = TRUE)
inspect <- openFDA_ndc$result[1:5] |> map(\(x) x[ls(x, pattern = "name|form|class")]) |> rbindlist(fill = TRUE)
View(inspect)
inspect <- openFDA_ndc$results[1:5] |> map(\(x) x[ls(x, pattern = "name|form|class")]) |> rbindlist(fill = TRUE)
inspect <- openFDA_ndc$results[1:5] |> rbindlist(fill = TRUE)
inspect <- openFDA_ndc$results[1:5] |> map(as.data.table) |> rbindlist(fill = TRUE)
get_ndc <- function(x){ purrr::map(x, data.table::as.data.table) |> data.table::rbindlist(fill = TRUE) }
copy_obj(drug_table = get_ndc, keep.orig = FALSE)
drug_table <- function(x){ purrr::map(x, data.table::as.data.table) |> data.table::rbindlist(fill = TRUE) }
inspect <- drug_table(openFDA_ndc)
inspect <- drug_table(openFDA_ndc$results)
api_data[1:10]
api_data[1:10][inspect, on = "NDC==product_ndc", nomatch = NULL]
api_data[1:10][inspect |> modify_at("product_ndc", \(x) stri_replace_all_regex(x, "-", "", vectorise_all = FALSE)), on = "NDC==product_ndc", nomatch = NULL]
api_data[
inspect[1:10] |> modify_at("product_ndc", \(x) stri_replace_all_regex(x, "-", "", vectorise_all = FALSE))
, on = "NDC==product_ndc"
, nomatch = NULL
]
inspect[1:10] |> modify_at("product_ndc", \(x) stri_replace_all_regex(x, "-", "", vectorise_all = FALSE))
View(api_data)
source("C:/Users/sapie/GitHub/port_MDRP_database/SANDBOX.R")
modify_at(api_data, "NDC", \(x) stri_pad_left(x, width = 8, pad = "0"))[
inspect[1:10] |> modify_at("product_ndc", \(x) stri_replace_all_regex(x, "-", "", vectorise_all = FALSE))
, on = "NDC==product_ndc"
, nomatch = NULL
]
modify_at(api_data, "NDC", \(x) stri_pad_left(x, width = 8, pad = "0"))
api_data$NDC |> unique() |> sample(100) |> stri_length()
inspect$product_id |> unique() |> sample(100) |> stri_length()
inspect$product_ndc |> unique() |> sample(100) |> stri_length()
api_data$NDC |> unique() |> sample(100) |> stri_length() |> table()
inspect$product_ndc |> unique() |> sample(100) |> stri_length() |> table()
inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex(x, "-", "", vectorise_all = FALSE) |> stri_length() |> table()
inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |> stri_length() |> table()
api_data$NDC |> unique() |> sample(100) |> stri_sub(length = 1) |> table()
inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |> stri_sub(length = 1) |> table()
replicate(
n = 30
, inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |> stri_length() |> table(), simplify = FALSE)
replicate(
n = 30
, { inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |>
stri_length() |> table() |> list()
}
, simplify = FALSE)
replicate(
n = 30
, { inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |>
stri_length() |> table() |> t()
}
, simplify = list)
replicate(
n = 30
, { inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |>
stri_length() |> table() |> t()
})
source("C:/Users/sapie/GitHub/port_MDRP_database/SANDBOX.R")
.cran_libs <- c("purrr", "jsonlite", "httr", "summarytools", "munsell"
, "SmartEDA", "htmltools", "slider", "stringi", "magrittr"
, "DT", "data.table", "pdftools", "lubridate")
.git_libs <- paste0("book.of.", c("utilities", "features", "workflow"))
if (!"book.of.workflow" %in% dir(sprintf("%s/library", R.home()))){
if (!"remotes" %in% dir(sprintf("%s/library", R.home()))){
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing package 'remotes'")
install.packages("remotes", repos = "https://cloud.r-project.org")
}
htmltools::tags$span(style = "text-deoration:italic; color:#333333; ", "... installing missing packages 'book.of.utilities', 'book.of.features', 'book.of.workflow'")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.features", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", subdir = "pkg")
}
library(book.of.workflow)
load_unloaded(!!!.cran_libs, autoinstall = TRUE)
urls <- list(
data = list(
`Data Dictionary` = "https://www.medicaid.gov/medicaid-chip-program-information/by-topics/prescription-drugs/downloads/recordspecficationanddefinitions.pdf"
, Data = "https://download.medicaid.gov/data/drugproducts1q_2023.csv"
) |> imap(\(x, y) tags$li(tags$a(href = x, y))) |> tags$ol()
, git_libs = map(.git_libs, \(x) tags$li(tags$a(title = paste0("delriaan/", x), x))) |> list() |> tags$ul()
, openFDA = "https://download.open.fda.gov/drug/ndc/drug-ndc-0001-of-0001.json.zip"
)
tags$table(
style = "width:475px; "
, tags$tr(
tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#EEEEEE; ", "CRAN", colspan = 2, width="65%")
, tags$th(style = "text-align:middle; border: solid 2px #AAAAFF; background-color:#AAAAAA; ", width = "*", "GitHub")
)
, tags$tr(
style = "align:top"
, tags$td(style = "text-align:middle; background-color:#AAAAAA; "
, map(.cran_libs[1:5], \(x) tags$li(x)) |> list() |> tags$ul())
, tags$td(style = "text-align:middle; background-color:#AAAAAA; "
, map(.cran_libs[6:length(.cran_libs)], \(x) tags$li(x)) |> list() |> tags$ul())
, tags$td(style = "background-color:#EEEEEE; padding-right:20px; ", urls$git_libs)
)
) |> tags$p()
api_data <- urls$data |>
as.character() |>
stri_extract_all_regex("http.+csv", simplify = TRUE) |>
as.vector() %T>%
(\(x) tags$p(sprintf("Retrieve data from '%s'", x)) |> print())() |>
GET() |>
content() |>
rawToChar() |>
(\(x) read.csv(text = x))() |>
as.data.table(na.rm = FALSE)
api_dictionary <- invisible(urls$data |>
as.character() |>
stri_extract_all_regex("http.+pdf", simplify = TRUE) |>
as.vector() |>
GET() |>
content() |>
pdf_text())
openFDA_ndc <- (\(x){
json.file <- "drug-ndc-0001-of-0001.json"
if (!json.file %in% dir()){ GET(urls$openFDA, write_disk(x, TRUE)) }
unzip(zipfile = x)
read_json(path = json.file)
})("ndc_json.zip")
drug_table <- function(x){ purrr::map(x, data.table::as.data.table) |> data.table::rbindlist(fill = TRUE) }
.summary_labels <- names(api_data) |>
rlang::set_names() |>
map_chr(\(x) stri_replace_all_fixed(x, ".", " ", vectorize_all = FALSE)) |>
imap_chr(\(x, y){
api_dictionary |>
stri_extract_all_regex(
sprintf(
fmt = "(%s)[:]\n.+"
, stri_replace_all_fixed(
x
, c("Pkg"
, "Intro"
, "COD Status"
, "FDA Application Number"
, "FDA Therapeutic Equivalence Code"
)
, c("Package"
, "Intro."
, "Covered Outpatient Drug [(]COD[)] Status"
, "FDA Application Number/OTC Monograph Number"
, "TEC"
)
, vectorize_all = FALSE
)
)
, simplify = TRUE
) |>
stats::na.omit() |>
as.vector() |>
discard(\(x) x == "") %>%
(\(i){
.out <- ifelse(identical(character(), i), y, paste(i, collapse = "\n"))
ifelse(stri_length(.out) > 50, paste0(.out, " ..."), .out)
})()
});
iwalk(.summary_labels, \(x, y){
.label = x; api_data <<- modify_at(api_data, y, \(i){ attr(i, "label") <- .label; i
})
})
api_data$NDC |> unique() |> sample(100) |> stri_length() |> table()
api_data$NDC |> unique() |> sample(100) |> stri_sub(length = 1) |> table()
replicate(
n = 30
, { inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |>
stri_length() |> table() |> t()
})
drug_table(openFDA_ndc)
inspect <- .Last.value
drug_table(openFDA_ndc$results)
inspect <- .Last.value
View(inspect)
replicate(
n = 30
, { inspect$product_ndc |> unique() |> sample(100) |> stri_replace_all_regex("-", "", vectorise_all = FALSE) |>
stri_length() |> table() |> t()
})
